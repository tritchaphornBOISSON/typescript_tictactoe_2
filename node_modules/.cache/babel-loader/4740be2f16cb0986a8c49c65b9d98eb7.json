{"ast":null,"code":"var _jsxFileName = \"/Users/tritchaphornboisson/All_Projects/typescript_tictactoe_new/src/Cell.tsx\";\nimport React from 'react';\nimport { motion } from \"framer-motion\";\nimport styled from 'styled-components';\nimport circle from \"./circle.svg\";\nimport cross from \"./cross.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CellWrapper = styled.button`\n background-color: #fff;\n margin-bottom: --1px;\n border: none;\n cursor: pointer;\n outline:none;\n position: relative;\n`;\n_c = CellWrapper;\nconst variants = {\n  hidden: {\n    opacity: 0.5,\n    transform: \"translate3d(-50%, -50%, 0) scale(0.5)\"\n  },\n  visible: {\n    opacity: 1,\n    transform: \"translate3d(-50%, -50%, 0) scale(1)\"\n  }\n};\nconst Shape = styled(motion.img).attrs(() => ({\n  initial: 'hidden',\n  variants\n}))`\n    height: 60px;\n    width: 60px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n`;\n_c2 = Shape;\nexport const Cell = ({\n  value,\n  toggle,\n  index\n}) => {\n  return /*#__PURE__*/_jsxDEV(CellWrapper, {\n    onClick: () => toggle(index),\n    children: value === 'o' ? /*#__PURE__*/_jsxDEV(Shape, {\n      animate: \"visible\",\n      src: circle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 26\n    }, this) : value ? /*#__PURE__*/_jsxDEV(Shape, {\n      animate: \"visible\",\n      src: cross\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 76\n    }, this) : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 12\n  }, this);\n};\n_c3 = Cell;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"CellWrapper\");\n$RefreshReg$(_c2, \"Shape\");\n$RefreshReg$(_c3, \"Cell\");","map":{"version":3,"sources":["/Users/tritchaphornboisson/All_Projects/typescript_tictactoe_new/src/Cell.tsx"],"names":["React","motion","styled","CellWrapper","button","variants","hidden","opacity","transform","visible","Shape","img","attrs","initial","Cell","value","toggle","index","circle","cross"],"mappings":";AAAA,OAAOA,KAAP,MAAwB,OAAxB;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;;;AAKA,MAAMC,WAAW,GAAGD,MAAM,CAACE,MAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;KAAMD,W;AASN,MAAME,QAAQ,GAAE;AACZC,EAAAA,MAAM,EAAE;AAAEC,IAAAA,OAAO,EAAE,GAAX;AAAgBC,IAAAA,SAAS,EAAE;AAA3B,GADI;AAEZC,EAAAA,OAAO,EAAE;AAAEF,IAAAA,OAAO,EAAE,CAAX;AAAcC,IAAAA,SAAS,EAAE;AAAzB;AAFG,CAAhB;AAKA,MAAME,KAAK,GAAGR,MAAM,CAACD,MAAM,CAACU,GAAR,CAAN,CAAmBC,KAAnB,CAAyB,OAAO;AAC1CC,EAAAA,OAAO,EAAE,QADiC;AAE1CR,EAAAA;AAF0C,CAAP,CAAzB,CAGV;AACJ;AACA;AACA;AACA;AACA;AACA,CATA;MAAMK,K;AAmBN,OAAO,MAAMI,IAAmB,GAAG,CAAC;AAACC,EAAAA,KAAD;AAAQC,EAAAA,MAAR;AAAgBC,EAAAA;AAAhB,CAAD,KAA4B;AAC3D,sBAAO,QAAC,WAAD;AAAa,IAAA,OAAO,EAAI,MAAMD,MAAM,CAACC,KAAD,CAApC;AAAA,cACFF,KAAK,KAAK,GAAV,gBAAgB,QAAC,KAAD;AAAO,MAAA,OAAO,EAAC,SAAf;AAAyB,MAAA,GAAG,EAAEG;AAA9B;AAAA;AAAA;AAAA;AAAA,YAAhB,GAA0DH,KAAK,gBAAG,QAAC,KAAD;AAAO,MAAA,OAAO,EAAC,SAAf;AAAyB,MAAA,GAAG,EAAEI;AAA9B;AAAA;AAAA;AAAA;AAAA,YAAH,GAA6C;AAD1G;AAAA;AAAA;AAAA;AAAA,UAAP;AAGH,CAJM;MAAML,I","sourcesContent":["import React, {FC} from 'react';\nimport { motion } from \"framer-motion\";\nimport styled from 'styled-components';\nimport circle from './circle.svg';\nimport cross from './cross.svg';\n\n\nconst CellWrapper = styled.button`\n background-color: #fff;\n margin-bottom: --1px;\n border: none;\n cursor: pointer;\n outline:none;\n position: relative;\n`\n\nconst variants= {\n    hidden: { opacity: 0.5, transform: \"translate3d(-50%, -50%, 0) scale(0.5)\"},\n    visible: { opacity: 1, transform: \"translate3d(-50%, -50%, 0) scale(1)\"},\n}\n\nconst Shape = styled(motion.img).attrs(() => ({\n    initial: 'hidden',\n    variants,\n}))`\n    height: 60px;\n    width: 60px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n`\n\nexport type CellValue = 'x' | 'o' | undefined\n\ntype CellProps = {\n    value: CellValue ;\n    toggle(index: number): void;\n    index: number;\n} \n\nexport const Cell: FC<CellProps> = ({value, toggle, index}) => {\n    return <CellWrapper onClick = {() => toggle(index) }>\n        {value === 'o' ? <Shape animate=\"visible\" src={circle} />: value ? <Shape animate=\"visible\" src={cross} /> : null}\n    </CellWrapper>\n}"]},"metadata":{},"sourceType":"module"}