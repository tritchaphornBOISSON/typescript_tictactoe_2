{"ast":null,"code":"var _jsxFileName = \"/Users/tritchaphornboisson/All_Projects/typescript_tictactoe_new/src/Board.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Cell } from \"./Cell\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BoardWrapper = styled.div`\nbackground-color: #999999;\nwidth: 100%;\nheight: 100%;\ngrid-template-columns: auto auto auto;\ngrid-template-rows: auto auto auto;\ndisplay: grid;\ncolumn-gap: 6px;\nrow-gap: 6px;\n`;\n_c = BoardWrapper;\nconst winningConditions = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\nexport const Board = ({\n  onGameEnd\n}) => {\n  _s();\n\n  const [cells, setCells] = useState(Array(9).fill(undefined));\n  const currentShape = cells.filter(Boolean).length % 2 ? 'o' : 'x';\n  const winningCondition = winningConditions.find(cond => {\n    const line = cond.map(cellIndex => cells[cellIndex]);\n    return line[0] && line.every(cellValue => cellValue === line[0]);\n  });\n  const tie = cells.filter(Boolean).length === 9;\n  const winningShape = winningCondition ? cells[winningCondition[0]] : undefined;\n  useEffect(() => {\n    if (winningShape) {\n      return onGameEnd(winningShape);\n    }\n\n    if (tie) {\n      return onGameEnd(\"tie\");\n    }\n  }, [winningShape, tie, onGameEnd]);\n\n  const toggleCell = index => {\n    setCells(cells => cells.map((c, i) => i === index ? currentShape : c));\n  };\n\n  return /*#__PURE__*/_jsxDEV(BoardWrapper, {\n    children: cells.map((cell, i) => /*#__PURE__*/_jsxDEV(Cell, {\n      value: cell,\n      index: i,\n      toggle: toggleCell\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 14\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Board, \"3mUlTOC1RciAF+mYnba4LKirq8Y=\");\n\n_c2 = Board;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"BoardWrapper\");\n$RefreshReg$(_c2, \"Board\");","map":{"version":3,"sources":["/Users/tritchaphornboisson/All_Projects/typescript_tictactoe_new/src/Board.tsx"],"names":["React","useState","useEffect","styled","Cell","BoardWrapper","div","winningConditions","Board","onGameEnd","cells","setCells","Array","fill","undefined","currentShape","filter","Boolean","length","winningCondition","find","cond","line","map","cellIndex","every","cellValue","tie","winningShape","toggleCell","index","c","i","cell"],"mappings":";;;AAAA,OAAOA,KAAP,IAAmBC,QAAnB,EAA6BC,SAA7B,QAA6C,OAA7C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,IAAT,QAAgC,QAAhC;;AAEA,MAAMC,YAAY,GAAGF,MAAM,CAACG,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATA;KAAMD,Y;AAaN,MAAME,iBAAiB,GAAG,CACtB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CADsB,EACb,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CADa,EACJ,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CADI,EAEtB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAFsB,EAEb,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAFa,EAEJ,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAFI,EAGtB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAHsB,EAGb,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAHa,CAA1B;AAUA,OAAO,MAAMC,KAAqB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmB;AAAA;;AACpD,QAAK,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAcW,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAcC,SAAd,CAAd,CAAjC;AAEA,QAAMC,YAAuB,GAAGL,KAAK,CAACM,MAAN,CAAaC,OAAb,EAAsBC,MAAtB,GAA+B,CAA/B,GAAmC,GAAnC,GAAyC,GAAzE;AAEA,QAAMC,gBAAgB,GAAGZ,iBAAiB,CAACa,IAAlB,CAAuBC,IAAI,IAAI;AACpD,UAAMC,IAAI,GAAGD,IAAI,CAACE,GAAL,CAASC,SAAS,IAAId,KAAK,CAACc,SAAD,CAA3B,CAAb;AACA,WAAOF,IAAI,CAAC,CAAD,CAAJ,IAAWA,IAAI,CAACG,KAAL,CAAWC,SAAS,IAAIA,SAAS,KAAKJ,IAAI,CAAC,CAAD,CAA1C,CAAlB;AACH,GAHwB,CAAzB;AAKA,QAAMK,GAAG,GAAGjB,KAAK,CAACM,MAAN,CAAaC,OAAb,EAAsBC,MAAtB,KAAiC,CAA7C;AACA,QAAMU,YAAY,GAAGT,gBAAgB,GAAGT,KAAK,CAACS,gBAAgB,CAAC,CAAD,CAAjB,CAAR,GAAgCL,SAArE;AAGAZ,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAG0B,YAAH,EAAgB;AACZ,aAAOnB,SAAS,CAACmB,YAAD,CAAhB;AACH;;AACD,QAAGD,GAAH,EAAO;AACH,aAAOlB,SAAS,CAAC,KAAD,CAAhB;AACH;AACJ,GAPQ,EAON,CAACmB,YAAD,EAAeD,GAAf,EAAoBlB,SAApB,CAPM,CAAT;;AASA,QAAMoB,UAAU,GAAIC,KAAD,IAAmB;AAClCnB,IAAAA,QAAQ,CAACD,KAAK,IAAIA,KAAK,CAACa,GAAN,CAAU,CAACQ,CAAD,EAAIC,CAAJ,KAAUA,CAAC,KAAKF,KAAN,GAAcf,YAAd,GAA6BgB,CAAjD,CAAV,CAAR;AACH,GAFD;;AAKH,sBAAO,QAAC,YAAD;AAAA,cAECrB,KAAK,CAACa,GAAN,CAAU,CAACU,IAAD,EAAOD,CAAP,kBACN,QAAC,IAAD;AAEA,MAAA,KAAK,EAAEC,IAFP;AAGA,MAAA,KAAK,EAAED,CAHP;AAIA,MAAA,MAAM,EAAEH;AAJR,OACOG,CADP;AAAA;AAAA;AAAA;AAAA,YADJ;AAFD;AAAA;AAAA;AAAA;AAAA,UAAP;AAYA,CAxCM;;GAAMxB,K;;MAAAA,K","sourcesContent":["import React, {FC, useState, useEffect} from 'react';\nimport styled from 'styled-components';\nimport { Cell, CellValue } from \"./Cell\";\n\nconst BoardWrapper = styled.div`\nbackground-color: #999999;\nwidth: 100%;\nheight: 100%;\ngrid-template-columns: auto auto auto;\ngrid-template-rows: auto auto auto;\ndisplay: grid;\ncolumn-gap: 6px;\nrow-gap: 6px;\n`;\n\ntype Winner = CellValue | 'tie'\n\nconst winningConditions = [\n    [0,1,2], [3,4,5], [6,7,8],\n    [0,3,6], [1,4,7], [2,5,8],\n    [0,4,8], [2,4,6]\n]\n\ninterface BoardProps {\n    onGameEnd(winner: Winner): void;\n}\n\nexport const Board: FC<BoardProps> = ({ onGameEnd }) => {\n    const[cells, setCells] = useState<CellValue[]>(Array(9).fill(undefined));\n \n    const currentShape: CellValue = cells.filter(Boolean).length % 2 ? 'o' : 'x';\n    \n    const winningCondition = winningConditions.find(cond => {\n        const line = cond.map(cellIndex => cells[cellIndex])\n        return line[0] && line.every(cellValue => cellValue === line[0])\n    })\n\n    const tie = cells.filter(Boolean).length === 9;\n    const winningShape = winningCondition ? cells[winningCondition[0]] : undefined ;\n\n\n    useEffect(() => {\n        if(winningShape){\n            return onGameEnd(winningShape)\n        }\n        if(tie){\n            return onGameEnd(\"tie\")\n        }\n    }, [winningShape, tie, onGameEnd])\n\n    const toggleCell = (index: number) => {\n        setCells(cells => cells.map((c, i) => i === index ? currentShape : c ))\n    }\n \n \n return <BoardWrapper>\n     {\n         cells.map((cell, i ) => (\n             <Cell \n             key = {i}\n             value={cell}\n             index={i}\n             toggle={toggleCell}\n             />\n         ))\n     }\n </BoardWrapper>\n};"]},"metadata":{},"sourceType":"module"}